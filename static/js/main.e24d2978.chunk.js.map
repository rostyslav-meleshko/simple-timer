{"version":3,"sources":["App.js","index.js"],"names":["App","useState","counter","setCounter","isTimeStarted","setIsTimeStarted","isTimeWaiting","setIsTimeWaiting","myInterval","setMyInterval","start","setInterval","increment","prev","formatToTime","time","seconds","minutes","Math","floor","hours","className","type","onClick","clearInterval","onDoubleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAiFeA,EA9EH,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAE0BF,oBAAS,GAFnC,mBAETG,EAFS,KAEMC,EAFN,OAG0BJ,oBAAS,GAHnC,mBAGTK,EAHS,KAGMC,EAHN,OAIoBN,qBAJpB,mBAITO,EAJS,KAIGC,EAJH,KAMVC,EAAQ,WACZL,GAAiB,GACjBE,GAAiB,GACjBE,EAAcE,YAAYC,EAAW,OAGjCA,EAAY,WAChBT,GAAW,SAAAU,GAAI,OAAIA,EAAO,MAkCtBC,EAAe,SAACC,GACpB,IAAMC,EAAUd,EAAU,GACpBe,EAAUC,KAAKC,MAAOjB,EAAU,KAAQ,IACxCkB,EAAQF,KAAKC,MAAMjB,EAAU,MAEnC,OAAQa,GACN,IAAK,UACH,OAAOC,EAAU,GAAKA,EAAU,IAAIA,EACtC,IAAK,UACH,OAAOC,EAAU,GAAKA,EAAU,IAAIA,EACtC,IAAK,QACH,OAAOG,EAAQ,GAAKA,EAAQ,IAAIA,IAMtC,OACE,mCACA,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,+BAAKP,EAAa,SAAlB,MAA+BA,EAAa,WAA5C,MAA2DA,EAAa,gBAExE,wBAAQQ,KAAK,SAASC,QA/CD,WACpBnB,GAPLoB,cAAchB,GACdL,EAAW,GACXE,GAAiB,GACjBE,GAAiB,IAKfG,KA6CE,SAAoDN,EAAgB,OAAS,UAC7E,wBAAQkB,KAAK,SAASG,cAxCT,YACZnB,GAAiBF,IACpBoB,cAAchB,GACdD,GAAkBD,IAGhBA,GAAiBF,IACnBG,GAAkBD,GAClBI,MAgCE,SAAkDJ,EAAgB,SAAW,UAC7E,wBAAQgB,KAAK,SAASC,QA7BR,WAChBpB,EAAW,IA4BT,yBCtERuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e24d2978.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\n\nconst App = () => {\n  const [counter, setCounter] = useState(0);\n  const [isTimeStarted, setIsTimeStarted] = useState(false);\n  const [isTimeWaiting, setIsTimeWaiting] = useState(false);\n  const [myInterval, setMyInterval] = useState();\n\n  const start = () => {\n    setIsTimeStarted(true);\n    setIsTimeWaiting(false);\n    setMyInterval(setInterval(increment, 1000));\n  }\n\n  const increment = () => {\n    setCounter(prev => prev + 1 )\n  }\n\n  const stop = () => {\n    clearInterval(myInterval);\n    setCounter(0);\n    setIsTimeStarted(false);\n    setIsTimeWaiting(false);\n  }\n\n  const handleStartAndStop = () => {\n    if (!isTimeStarted) {\n      start();\n    } else {\n      stop();\n    }\n  }\n\n  const handleWait = () => {\n    if (!isTimeWaiting && isTimeStarted) {\n      clearInterval(myInterval);\n      setIsTimeWaiting(!isTimeWaiting);\n    } \n\n    if (isTimeWaiting && isTimeStarted) {\n      setIsTimeWaiting(!isTimeWaiting);\n      start();\n    }\n  }\n\n  const handleReset = () => {\n      setCounter(0);\n  }\n\n  const formatToTime = (time) => {\n    const seconds = counter % 60;\n    const minutes = Math.floor((counter % 3600) / 60);\n    const hours = Math.floor(counter / 3600)\n\n    switch (time) {\n      case 'seconds':\n        return seconds > 10 ? seconds : '0'+seconds;\n      case 'minutes': \n        return minutes > 10 ? minutes : '0'+minutes;\n      case 'hours': \n        return hours > 10 ? hours : '0'+hours;\n      default: break;\n    }\n\n  }\n\n  return (\n    <>\n    <div className=\"App\">\n      <div className=\"timer\">\n        <h1>{formatToTime('hours')} : {formatToTime('minutes')} : {formatToTime('seconds')}</h1>\n        </div>\n        <button type=\"button\" onClick={handleStartAndStop}>{isTimeStarted ? 'Stop' : 'Start'}</button>\n        <button type=\"button\" onDoubleClick={handleWait}>{isTimeWaiting ? 'Resume' : 'Pause'}</button>\n        <button type=\"button\" onClick={handleReset}>Reset</button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}